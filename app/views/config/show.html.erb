<% content_for :title, "設定 | #{blog_title}" %>
<% content_for :description, "General Letter Publication System based on ActivityPub" %>

<!-- ブログ風設定ページ -->
<div class="max-w-2xl mx-auto">
  <!-- 設定ページヘッダー -->
  <header class="mb-12 text-center">
    <h1 class="page-heading">
      設定
    </h1>
  </header>

  <!-- 設定フォーム -->
  <%= form_with url: config_path, method: :patch, local: true, class: "space-y-8", onsubmit: "return true" do |form| %>
    
    <!-- インスタンス情報セクション -->
    <section class="border border-gray-300 p-6">
      <h2 class="text-lg section-heading mb-4">
        インスタンス情報
      </h2>
      
      <div class="space-y-4">
        <div>
          <%= form.label "config[instance_name]", "インスタンス名", 
              class: "form-label" %>
          <%= form.text_field "config[instance_name]", 
              value: @config[:instance_name],
              placeholder: "インスタンス名（ブログタイトル）",
              class: "w-full form-input" %>
        </div>

        <div>
          <%= form.label "config[instance_description]", "説明", 
              class: "form-label" %>
          <%= form.text_area "config[instance_description]", 
              value: @config[:instance_description],
              placeholder: "インスタンスの説明",
              rows: 3,
              class: "w-full form-input resize-none" %>
        </div>

        <div>
          <%= form.label "config[instance_contact_email]", "連絡先メール", 
              class: "form-label" %>
          <%= form.email_field "config[instance_contact_email]", 
              value: @config[:instance_contact_email],
              placeholder: "contact@example.com",
              class: "w-full form-input" %>
        </div>

        <div>
          <%= form.label "config[instance_maintainer]", "管理者名", 
              class: "form-label" %>
          <%= form.text_field "config[instance_maintainer]", 
              value: @config[:instance_maintainer],
              placeholder: "管理者名",
              class: "w-full form-input" %>
        </div>

        <div>
          <%= form.label "config[blog_footer]", "フッター", 
              class: "form-label" %>
          <%= form.text_field "config[blog_footer]", 
              value: @config[:blog_footer],
              placeholder: "フッターに表示するテキスト",
              class: "w-full form-input" %>
        </div>

      </div>
    </section>

    <!-- ユーザプロフィールセクション -->
    <section class="border border-gray-300 p-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg section-heading">
          プロフィール設定
        </h2>
        <%= link_to "プロフィールを表示", profile_path(current_user.username), 
            class: "btn-secondary btn-sm",
            target: "_blank" %>
      </div>
      <div class="space-y-4">
        <div>
          <%= form.label "actor[avatar]", "プロフィール画像", 
              class: "form-label" %>
          
          <div class="border border-gray-300 border-dashed p-6 text-center hover:border-gray-400 transition-colors">
            <%= form.file_field "actor[avatar]", 
                accept: "image/*",
                class: "hidden",
                id: "avatar_image_input",
                onchange: "previewAvatarImage(this)" %>
            <label for="avatar_image_input" class="cursor-pointer">
              <div id="avatar_image_preview_container" class="<%= 'hidden' unless current_user&.avatar&.attached? %>">
                <% if current_user&.avatar&.attached? %>
                  <img id="avatar_image_preview" src="<%= current_user.avatar_url %>" class="mx-auto max-w-16 max-h-16 object-contain mb-2 rounded">
                <% else %>
                  <img id="avatar_image_preview" class="mx-auto max-w-16 max-h-16 object-contain mb-2 rounded">
                <% end %>
                <p class="text-sm text-gray-600" class="text-normal">
                  クリックして変更
                </p>
              </div>
              <div id="avatar_upload_placeholder" class="<%= 'hidden' if current_user&.avatar&.attached? %>">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <p class="mt-2 text-sm text-gray-600" class="text-normal">
                  <span class="font-medium">クリックしてファイルを選択</span> またはドラッグ&ドロップ
                </p>
                <p class="text-xs text-gray-500" class="page-heading">
                  PNG, JPG, GIF, WebP対応
                </p>
              </div>
            </label>
          </div>
        </div>

        <div>
          <%= form.label "actor[display_name]", "ユーザ名", 
              class: "form-label" %>
          <%= form.text_field "actor[display_name]", 
              value: current_user&.display_name,
              placeholder: "表示名",
              class: "w-full form-input" %>
          <p class="text-xs text-gray-500 mt-1" class="page-heading">
            プロフィールページで表示される名前です。
          </p>
        </div>

        <div>
          <%= form.label "actor[note]", "自己紹介", 
              class: "form-label" %>
          <%= form.text_area "actor[note]", 
              value: current_user&.note,
              placeholder: "あなたの自己紹介を入力してください",
              rows: 4,
              class: "w-full form-input resize-none" %>
          <p class="text-xs text-gray-500 mt-1" class="page-heading">
            https://から始まるURLは自動的にリンクになります。:絵文字名:でカスタム絵文字が使用できます。
          </p>
        </div>

        <!-- URL設定欄 -->
        <div>
          <div class="flex items-center justify-between mb-3">
            <label class="block text-sm text-gray-700" class="text-normal">
              プロフィールリンク
            </label>
            <button type="button" onclick="addProfileLink()" 
                    class="btn-secondary btn-sm">
              追加
            </button>
          </div>
          
          <div id="profile-links-container" class="space-y-3">
            <!-- 既存のリンクがあれば表示、なければ最初の1つを表示 -->
            <% if current_user&.fields.present? %>
              <% begin %>
                <% existing_links = JSON.parse(current_user.fields) %>
                <% existing_links.each_with_index do |link, index| %>
                  <div class="profile-link-item flex items-center gap-3">
                    <div class="w-24">
                      <input type="text" name="actor[fields][][name]" 
                             value="<%= link['name'] %>"
                             placeholder="ラベル"
                             class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm">
                    </div>
                    <div class="flex-1">
                      <input type="text" name="actor[fields][][value]" 
                             value="<%= link['value'] %>"
                             placeholder="値を入力"
                             class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm">
                    </div>
                    <div>
                      <button type="button" onclick="removeProfileLink(this)" 
                              class="delete-button px-3 py-1 border border-red-300 text-red-700 hover:bg-red-50 transition-colors cursor-pointer text-sm <%= 'hidden' if existing_links.length <= 1 %>">
                        削除
                      </button>
                    </div>
                  </div>
                <% end %>
              <% rescue JSON::ParserError %>
                <!-- JSON解析エラーの場合はデフォルトを表示 -->
                <div class="profile-link-item flex items-center gap-3">
                  <div class="w-24">
                    <input type="text" name="actor[fields][][name]" 
                           value=""
                           placeholder="ラベル"
                           class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm"
                           class="text-normal">
                  </div>
                  <div class="flex-1">
                    <input type="text" name="actor[fields][][value]" 
                           value=""
                           placeholder="値を入力"
                           class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm"
                           class="text-normal">
                  </div>
                  <div>
                    <button type="button" onclick="removeProfileLink(this)" 
                            class="delete-button px-3 py-1 border border-red-300 text-red-700 hover:bg-red-50 transition-colors cursor-pointer text-sm hidden">
                      削除
                    </button>
                  </div>
                </div>
              <% end %>
            <% else %>
              <!-- 既存データがない場合のデフォルト表示 -->
              <div class="profile-link-item flex items-center gap-3">
                <div class="w-24">
                  <input type="text" name="actor[fields][][name]" 
                         value=""
                         placeholder="ラベル"
                         class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm"
                         class="text-normal">
                </div>
                <div class="flex-1">
                  <input type="text" name="actor[fields][][value]" 
                         value=""
                         placeholder="値を入力"
                         class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm"
                         class="text-normal">
                </div>
                <div>
                  <button type="button" onclick="removeProfileLink(this)" 
                          class="delete-button px-3 py-1 border border-red-300 text-red-700 hover:bg-red-50 transition-colors cursor-pointer text-sm hidden">
                    削除
                  </button>
                </div>
              </div>
            <% end %>
          </div>
          
          <p class="text-xs text-gray-500 mt-3" class="page-heading">
            プロフィールページに表示されるリンクを設定できます（最大5個まで）。ラベルと値で:絵文字名:が使用できます。
          </p>
        </div>
      </div>
    </section>

    <!-- インスタンス管理セクション -->
    <section class="border border-gray-300 p-6 mt-8">
      <h2 class="text-lg section-heading mb-4">
        インスタンス管理
      </h2>
      
      <div class="space-y-4">
        <div>
          <%= link_to "リレー管理", config_relays_path, 
              class: "btn-secondary btn-sm" %>
          <p class="text-sm text-gray-500 mt-1">
            リレーサーバとの接続を管理できます。
          </p>
        </div>
        
        <div>
          <%= link_to "カスタム絵文字の管理", config_custom_emojis_path, 
              class: "btn-secondary btn-sm" %>
          <p class="text-sm text-gray-500 mt-1">
            インスタンス独自の絵文字を追加・管理できます。
          </p>
        </div>
        
      </div>
    </section>

    <!-- Cloudflare R2 設定セクション -->
    <section class="border border-gray-300 p-6 mt-8">
      <h2 class="text-lg section-heading mb-4">
        オブジェクトストレージ設定
      </h2>
      
      <div class="space-y-4">
        <div>
          <label class="block text-sm text-gray-700 mb-2" class="text-normal">
            ステータス
          </label>
          <div class="flex items-center">
            <span class="<%= @config[:s3_enabled] ? 'text-green-600' : 'text-gray-500' %> text-sm" class="text-normal">
              <%= @config[:s3_enabled] ? '✓ 有効' : '無効' %>
            </span>
          </div>
        </div>
        
        <% if @config[:s3_enabled] %>
          <div>
            <label class="block text-sm text-gray-700 mb-2" class="text-normal">
              エンドポイント
            </label>
            <div class="px-3 py-2 bg-gray-50 border border-gray-300 text-gray-700 text-sm break-all" class="text-normal">
              <%= @config[:s3_endpoint] || '未設定' %>
            </div>
          </div>
          
          <div>
            <label class="block text-sm text-gray-700 mb-2" class="text-normal">
              バケット名
            </label>
            <div class="px-3 py-2 bg-gray-50 border border-gray-300 text-gray-700 text-sm" class="text-normal">
              <%= @config[:s3_bucket] || '未設定' %>
            </div>
          </div>
          
          <div>
            <label class="block text-sm text-gray-700 mb-2" class="text-normal">
              アクセスキーID
            </label>
            <div class="px-3 py-2 bg-gray-50 border border-gray-300 text-gray-700 text-sm break-all" class="text-normal">
              <%= @config[:r2_access_key_id] || '未設定' %>
            </div>
          </div>
          
          <div>
            <label class="block text-sm text-gray-700 mb-2" class="text-normal">
              シークレットアクセスキー
            </label>
            <div class="px-3 py-2 bg-gray-50 border border-gray-300 text-gray-700 text-sm" class="text-normal">
              <%= @config[:r2_secret_access_key] ? '••••••••••••••••' : '未設定' %>
            </div>
          </div>
          
          <% if @config[:s3_alias_host].present? %>
            <div>
              <label class="block text-sm text-gray-700 mb-2" class="text-normal">
                カスタムドメイン
              </label>
              <div class="px-3 py-2 bg-gray-50 border border-gray-300 text-gray-700 text-sm" class="text-normal">
                <%= @config[:s3_alias_host] %>
              </div>
            </div>
          <% end %>
        <% end %>
      </div>
    </section>

    <!-- デザインセクション -->
    <section class="border border-gray-300 p-6 mt-8">
      <h2 class="text-lg section-heading mb-4">
        デザイン設定
      </h2>
      
      <div class="space-y-4">
        <div>
          <%= form.label "config[background_color]", "背景色", 
              class: "form-label" %>
          <div class="flex items-center space-x-3">
            <%= form.text_field "config[background_color]", 
                value: @config[:background_color],
                placeholder: "#fdfbfb",
                pattern: "#[0-9a-fA-F]{6}",
                class: "flex-1 px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors font-mono",
                style: "font-family: 'Noto Sans JP', sans-serif; font-weight: 400;",
                id: "background_color_input",
                oninput: "updateColorPreview(this.value)" %>
            <div class="w-10 h-10 border border-gray-300" 
                 style="background-color: <%= @config[:background_color] %>;" 
                 title="現在の背景色"
                 id="color_preview"></div>
          </div>
          <p class="text-xs text-gray-500 mt-1" class="page-heading">
            #から始まる6桁のカラーコードで入力してください（例: #fdfbfb）
          </p>
        </div>
      </div>
    </section>

    <!-- 保存ボタン -->
    <div class="mt-6 text-right">
      <%= form.submit "保存", 
          class: "btn-secondary btn-sm" %>
    </div>
  <% end %>


  <!-- 成功メッセージ -->
  <% if flash[:notice] %>
    <div class="mt-6 p-4 bg-green-50 border border-green-200">
      <p class="text-sm text-green-700" class="text-normal">
        <%= flash[:notice] %>
      </p>
    </div>
  <% end %>

  <!-- エラーメッセージ -->
  <% if flash[:alert] %>
    <div class="mt-6 p-4 bg-red-50 border border-red-200">
      <p class="text-sm text-red-700" class="text-normal">
        <%= flash[:alert] %>
      </p>
    </div>
  <% end %>
</div>

<script>
function updateColorPreview(color) {
  const preview = document.getElementById('color_preview');
  if (color.match(/^#[0-9a-fA-F]{6}$/)) {
    preview.style.backgroundColor = color;
    preview.style.borderColor = '#d1d5db'; // gray-300
  } else {
    preview.style.backgroundColor = '#f3f4f6'; // gray-100
    preview.style.borderColor = '#ef4444'; // red-500
  }
}

function previewImageGeneric(input, previewId, previewContainerId, placeholderId) {
  const file = input.files[0];
  const preview = document.getElementById(previewId);
  const previewContainer = document.getElementById(previewContainerId);
  const placeholder = document.getElementById(placeholderId);
  
  if (file) {
    const reader = new FileReader();
    
    reader.onload = function(e) {
      preview.src = e.target.result;
      previewContainer.classList.remove('hidden');
      placeholder.classList.add('hidden');
    };
    
    reader.readAsDataURL(file);
  }
}

// プロフィール画像専用のプレビュー関数
function previewAvatarImage(input) {
  const file = input.files[0];
  const preview = document.getElementById('avatar_image_preview');
  const previewContainer = document.getElementById('avatar_image_preview_container');
  const placeholder = document.getElementById('avatar_upload_placeholder');
  
  if (file) {
    const reader = new FileReader();
    
    reader.onload = function(e) {
      preview.src = e.target.result;
      previewContainer.classList.remove('hidden');
      placeholder.classList.add('hidden');
    };
    
    reader.readAsDataURL(file);
  }
}

// ドラッグ&ドロップ対応（汎用化）
function setupDragAndDrop(dropZoneSelector, fileInputId, previewFunction) {
  const dropZone = document.querySelector(dropZoneSelector);
  const fileInput = document.getElementById(fileInputId);
  
  if (dropZone && fileInput) {
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, unhighlight, false);
    });
    
    function highlight(e) {
      dropZone.classList.add('border-gray-500', 'bg-gray-50');
    }
    
    function unhighlight(e) {
      dropZone.classList.remove('border-gray-500', 'bg-gray-50');
    }
    
    dropZone.addEventListener('drop', handleDrop, false);
    
    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      
      if (files.length > 0) {
        fileInput.files = files;
        previewFunction(fileInput);
      }
    }
  }
}

// プロフィール画像のドラッグ&ドロップ設定
document.addEventListener('DOMContentLoaded', function() {
  setupDragAndDrop('.border-dashed', 'avatar_image_input', previewAvatarImage);
});

// プロフィールリンクの追加
function addProfileLink() {
  const container = document.getElementById('profile-links-container');
  const currentCount = container.querySelectorAll('.profile-link-item').length;
  
  // 最大5個まで
  if (currentCount >= 5) {
    alert('プロフィールリンクは最大5個まで設定できます。');
    return;
  }
  
  const newItem = document.createElement('div');
  newItem.className = 'profile-link-item flex items-center gap-3';
  newItem.innerHTML = `
    <div class="w-24">
      <input type="text" name="actor[fields][][name]" 
             value=""
             placeholder="ラベル"
             class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm">
    </div>
    <div class="flex-1">
      <input type="text" name="actor[fields][][value]" 
             value=""
             placeholder="値を入力"
             class="w-full px-3 py-2 border border-gray-300 focus:border-gray-500 transition-colors text-sm">
    </div>
    <div>
      <button type="button" onclick="removeProfileLink(this)" 
              class="delete-button px-3 py-1 border border-red-300 text-red-700 hover:bg-red-50 transition-colors cursor-pointer text-sm">
        削除
      </button>
    </div>
  `;
  
  container.appendChild(newItem);
  updateDeleteButtonsVisibility();
}

// プロフィールリンクの削除
function removeProfileLink(button) {
  const item = button.closest('.profile-link-item');
  item.remove();
  updateDeleteButtonsVisibility();
}

// 削除ボタンの表示・非表示を更新
function updateDeleteButtonsVisibility() {
  const container = document.getElementById('profile-links-container');
  const items = container.querySelectorAll('.profile-link-item');
  const deleteButtons = container.querySelectorAll('.delete-button');
  
  // 1個の場合は削除ボタンを非表示、2個以上の場合は表示
  deleteButtons.forEach(button => {
    if (items.length <= 1) {
      button.classList.add('hidden');
    } else {
      button.classList.remove('hidden');
    }
  });
}

// ページ読み込み時に削除ボタンの表示状態を設定
document.addEventListener('DOMContentLoaded', function() {
  updateDeleteButtonsVisibility();
});
</script>
